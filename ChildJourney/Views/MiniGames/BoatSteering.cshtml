
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body {
            margin: 0;
            overflow: hidden;
        }

        canvas {
            display: block;
            border: 2px solid #333; /* Added border around the canvas */
        }
    </style>
    <title>Boat Steering Game</title>
</head>

<div class="row">
    <div id="rewards" class="block" style="border:solid;display:none">
        <table class="table">
            <tr>
                <td><button id="SeasonClaim" onclick="AddSeasonPoints(25, this)">Reward: 25 SeasonPoints</button></td>
            </tr>
            <tr>
                <td><button id="CoinClaim" onclick="AddCoins(20, this)">Reward: 20 Coins</button></td>
            </tr>
            <tr>
                <td>
                    <button>
                        @{
                            if (Context.Session.GetString("HomeIsland") == "Active")
                            {
                                    <a href="../Game/HomeIsland">Return to island</a>
                            }
                        }
                    </button>
                </td>
            </tr>
        </table>
    </div>

    <div id="GameOver" class="block" style="border:solid;display:none">
        <table class="table">
            <tr>
                <td><button onclick="resetGame()">Try again?</button></td>
            </tr>
            <tr>
                <td>
                    <button>
                        @{
                            if (Context.Session.GetString("HomeIsland") == "Active")
                            {
                                    <a href="../Game/HomeIsland">Return to island</a>
                            }
                        }
                    </button>
                </td>
            </tr>
        </table>
    </div>

    <div class="block">
        <canvas id="gameCanvas" style="background-color:lightblue"></canvas>

        <script>
            const canvas = document.getElementById('gameCanvas');
            const ctx = canvas.getContext('2d');

            const boat = {
                Health: 3,
                lane: 1,
                width: 50,
                height: 50,
                speed: 1, // Adjusted speed for even slower animation
                laneWidth: canvas.width / 3,
                Img: 'https://buffer.com/cdn-cgi/image/w=1000,fit=contain,q=90,f=auto/library/content/images/size/w1200/2023/10/free-images.jpg'
            };

            const Img = new Image();
            Img.src = boat.Img;
            const pattern = ctx.createPattern(Img, "repeat");

            let obstacles = [];
            let score = 0;

            function drawBoat() {
                ctx.fillStyle = pattern;
                const x = boat.lane * boat.laneWidth + (boat.laneWidth - boat.width) / 2;
                ctx.fillRect(x, canvas.height - boat.height - 10, boat.width, boat.height);
            }

            function drawObstacles() {
                ctx.fillStyle = 'red';
                obstacles.forEach(obstacle => {
                    ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);
                });
            }

            function drawScore() {
                ctx.fillStyle = 'black';
                ctx.font = '16px Arial';
                ctx.fillText('Score: ' + score, 10, 20);
                if (score >= 25) {
                    score = "WIN";
                    document.getElementById("rewards").style.display = "block";
                }
            }

            function drawHealth() {
                ctx.fillStyle = 'black';
                ctx.font = '16px Arial';
                ctx.fillText('Health: ' + boat.Health, canvas.width - 80, 20);
            }

            function resetGame() {
                document.location.reload();
            }

            function drawLanes() {
                ctx.strokeStyle = '#333'; // Color of the lane borders
                ctx.lineWidth = 2;
                for (let i = 1; i < 3; i++) {
                    const x = i * boat.laneWidth;
                    ctx.beginPath();
                    ctx.moveTo(x, 0);
                    ctx.lineTo(x, canvas.height);
                    ctx.stroke();
                }
            }

            function update() {
                // Move boat
                if (rightPressed && boat.lane < 2) {
                    boat.lane++;
                    rightPressed = false; // Set to false to move one lane at a time
                }
                if (leftPressed && boat.lane > 0) {
                    boat.lane--;
                    leftPressed = false;
                } // Set to false to move one lane at a time

                if (boat.Health <= 0) {
                    document.getElementById("GameOver").style.display = "block";
                }
                

                // Move obstacles
                if (score != "WIN" && boat.Health > 0) {
                    obstacles.forEach(obstacle => {
                        obstacle.y += obstacle.speed;
                        if (obstacle.y > canvas.height) {
                            obstacles.shift();
                            score++;
                        }
                    });

                    // Check for collisions
                    obstacles.forEach((obstacle, index) => {
                        const x = boat.lane * boat.laneWidth + (boat.laneWidth - boat.width) / 2;
                        if (x < obstacle.x + obstacle.width && x + boat.width > obstacle.x && canvas.height - boat.height - 10 < obstacle.y + obstacle.height && canvas.height - boat.height - 10 + boat.height > obstacle.y) {
                            obstacles.splice(index, 1);
                            boat.Health -= 1;
                        }
                    });
                }
            }

            function draw() {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                drawLanes();
                drawBoat();
                drawObstacles();
                drawScore();
                drawHealth();
            }

            function gameLoop() {
                update();
                draw();
                requestAnimationFrame(gameLoop);
            }

            function getRandomLane() {
                return Math.floor(Math.random() * 3);
            }

            function generateObstacle() {
                if (score != "WIN" && boat.Health > 0) 
                {
                    const lane1 = getRandomLane();
                    const lane2 = (lane1 + 1) % 3; // Ensure lane2 is different from lane1
                    const obstacle1 = {
                        x: lane1 * boat.laneWidth + (boat.laneWidth - 30) / 2,
                        y: 0,
                        width: 30,
                        height: 30,
                        speed: 1, // Adjusted obstacle speed for even slower animation
                    };
                    const obstacle2 = {
                        x: lane2 * boat.laneWidth + (boat.laneWidth - 30) / 2,
                        y: 0,
                        width: 30,
                        height: 30,
                        speed: 1, // Adjusted obstacle speed for even slower animation
                    };
                    obstacles.push(obstacle1, obstacle2);
                }
            }

            document.addEventListener('keydown', keyDownHandler);
            document.addEventListener('keyup', keyUpHandler);

            let rightPressed = false;
            let leftPressed = false;

            function keyDownHandler(e) {
                if (e.key === 'Right' || e.key === 'ArrowRight') {
                    rightPressed = true;
                } else if (e.key === 'Left' || e.key === 'ArrowLeft') {
                    leftPressed = true;
                }
            }

            function keyUpHandler(e) {
                if (e.key === 'Right' || e.key === 'ArrowRight') {
                    rightPressed = false;
                } else if (e.key === 'Left' || e.key === 'ArrowLeft') {
                    leftPressed = false;
                }
            }

            function startGame() {
                setInterval(generateObstacle, 4000); // Adjusted obstacle generation interval
                gameLoop();
            }

            canvas.width = 300;
            canvas.height = 400;

            startGame();
        </script>
    </div>
</div>